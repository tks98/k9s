package view

import (
	"github.com/derailed/k9s/internal/client"
	"github.com/derailed/k9s/internal/ui"
	"github.com/gdamore/tcell/v2"
	"k8s.io/apimachinery/pkg/labels"
)

// Secret presents a secret viewer.
type VulnerabilityReport struct {
	ResourceViewer
}

// NewSecret returns a new viewer.
func NewVulerabilityReport(gvr client.GVR) ResourceViewer {
	vr  := VulnerabilityReport{
		ResourceViewer: NewBrowser(gvr),
	}
	vr.AddBindKeysFn(vr .bindKeys)

	return &vr
}

func (vr *VulnerabilityReport) bindKeys(aa ui.KeyActions) {
	aa.Add(ui.KeyActions{
		ui.KeyX: ui.NewKeyAction("ViewReport", vr.viewReport, true),
		ui.KeyU: ui.NewKeyAction("UsedBy", vr.refCmd, true),
	})
}

func (vr *VulnerabilityReport) refCmd(evt *tcell.EventKey) *tcell.EventKey {
	return scanRefs(evt, vr.App(), vr.GetTable(), "aquasecurity.github.io/v1alpha1/VulnerabilityReport")
}

func (vr *VulnerabilityReport) viewReport(evt *tcell.EventKey) *tcell.EventKey {
	path := vr.GetTable().GetSelectedItem()
	if path == "" {
		return evt
	}

	_, err := vr.App().factory.Get(vr .GVR().String(), path, true, labels.Everything())
	if err != nil {
		vr.App().Flash().Err(err)
		return nil
	}

	/*
	var secret v1.Secret
	err = runtime.DefaultUnstructuredConverter.FromUnstructured(o.(*unstructured.Unstructured).Object, &secret)
	if err != nil {
		vr .App().Flash().Err(err)
		return nil
	}

	d := make(map[string]string, len(secret.Data))
	for k, val := range secret.Data {
		d[k] = string(val)
	}
	raw, err := yaml.Marshal(d)
	if err != nil {
		vr .App().Flash().Errf("Error decoding secret %vr ", err)
		return nil
	}

	details := NewDetails(vr .App(), "Secret Decoder", path, true).Update(string(raw))
	if err := vr .App().inject(details); err != nil {
		vr .App().Flash().Err(err)
	}*/

	return nil
}
