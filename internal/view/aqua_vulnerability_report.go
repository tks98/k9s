package view

import (
	"github.com/derailed/k9s/internal/client"
	"github.com/derailed/k9s/internal/ui"
	"github.com/gdamore/tcell/v2"
	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"sigs.k8s.io/yaml"
	"time"
)


// AquaSecurityVulnerabilityReport represents an aqua vulnerability report crd
type AquaSecurityVulnerabilityReport struct {
	APIVersion string `yaml:"apiVersion"`
	Kind       string `yaml:"kind"`
	Metadata   struct {
		CreationTimestamp time.Time `yaml:"creationTimestamp"`
		Generation        int       `yaml:"generation"`
		Labels            struct {
			ResourceSpecHash           string `yaml:"resource-spec-hash"`
			StarboardContainerName     string `yaml:"starboard.container.name"`
			StarboardResourceKind      string `yaml:"starboard.resource.kind"`
			StarboardResourceName      string `yaml:"starboard.resource.name"`
			StarboardResourceNamespace string `yaml:"starboard.resource.namespace"`
		} `yaml:"labels"`
		Name            string `yaml:"name"`
		Namespace       string `yaml:"namespace"`
		OwnerReferences []struct {
			APIVersion         string `yaml:"apiVersion"`
			BlockOwnerDeletion bool   `yaml:"blockOwnerDeletion"`
			Controller         bool   `yaml:"controller"`
			Kind               string `yaml:"kind"`
			Name               string `yaml:"name"`
			UID                string `yaml:"uid"`
		} `yaml:"ownerReferences"`
		ResourceVersion string `yaml:"resourceVersion"`
		UID             string `yaml:"uid"`
	} `yaml:"metadata"`
	Report struct {
		Artifact struct {
			Repository string `yaml:"repository"`
			Tag        string `yaml:"tag"`
		} `yaml:"artifact"`
		Registry struct {
			Server string `yaml:"server"`
		} `yaml:"registry"`
		Scanner struct {
			Name    string `yaml:"name"`
			Vendor  string `yaml:"vendor"`
			Version string `yaml:"version"`
		} `yaml:"scanner"`
		Summary struct {
			CriticalCount int `yaml:"criticalCount"`
			HighCount     int `yaml:"highCount"`
			LowCount      int `yaml:"lowCount"`
			MediumCount   int `yaml:"mediumCount"`
			NoneCount     int `yaml:"noneCount"`
			UnknownCount  int `yaml:"unknownCount"`
		} `yaml:"summary"`
		UpdateTimestamp time.Time `yaml:"updateTimestamp"`
		Vulnerabilities []struct {
			FixedVersion     string        `yaml:"fixedVersion"`
			InstalledVersion string        `yaml:"installedVersion"`
			Links            []interface{} `yaml:"links"`
			PrimaryLink      string        `yaml:"primaryLink,omitempty"`
			Resource         string        `yaml:"resource"`
			Score            float64       `yaml:"score,omitempty"`
			Severity         string        `yaml:"severity"`
			Title            string        `yaml:"title"`
			VulnerabilityID  string        `yaml:"vulnerabilityID"`
		} `yaml:"vulnerabilities"`
	} `yaml:"report"`
}

// VulnerabilityReport presents a VulnerabilityReport viewer.
type VulnerabilityReport struct {
	ResourceViewer
}

// NewVulnerabilityReport returns a new viewer.
func NewVulnerabilityReport(gvr client.GVR) ResourceViewer {
	vr := VulnerabilityReport{
		ResourceViewer: NewBrowser(gvr),
	}
	vr.AddBindKeysFn(vr.bindKeys)

	return &vr
}

func (vr *VulnerabilityReport) bindKeys(aa ui.KeyActions) {
	aa.Add(ui.KeyActions{
		ui.KeyX: ui.NewKeyAction("View Report Summary", vr.viewReport, true),
	})
}

func (vr *VulnerabilityReport) refCmd(evt *tcell.EventKey) *tcell.EventKey {
	return scanRefs(evt, vr.App(), vr.GetTable(), "aquasecurity.github.io/v1alpha1/VulnerabilityReport")
}

func (vr *VulnerabilityReport) viewReport(evt *tcell.EventKey) *tcell.EventKey {
	path := vr.GetTable().GetSelectedItem()
	if path == "" {
		return evt
	}

	r, err := vr.App().factory.Get(vr.GVR().String(), path, true, labels.Everything())
	if err != nil {
		vr.App().Flash().Err(err)
		return nil
	}

	var report AquaSecurityVulnerabilityReport
	err = runtime.DefaultUnstructuredConverter.FromUnstructured(r.(*unstructured.Unstructured).Object, &report)
	if err != nil {
		vr.App().Flash().Err(err)
		return nil
	}

	type reportSummary struct {
		Score            float64
		Severity         string
		Resource         string
		InstalledVersion string
		FixedVersion     string
	}

	summary := make(map[string]reportSummary, len(report.Report.Vulnerabilities))
	for _, val := range report.Report.Vulnerabilities {
		summary[val.VulnerabilityID] = reportSummary {
			Score:            val.Score,
			Severity:         val.Severity,
			Resource:         val.Resource,
			InstalledVersion: val.InstalledVersion,
			FixedVersion:     val.FixedVersion,
		}
	}

	raw, err := yaml.Marshal(summary)
	if err != nil {
		vr.App().Flash().Errf("Error viewing vulnerability report summary %vr ", err)
		return nil
	}

	details := NewDetails(vr.App(), "Summary", path, true).Update(string(raw))
	if err := vr.App().inject(details); err != nil {
		vr.App().Flash().Err(err)
	}

	return nil
}
